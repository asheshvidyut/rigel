{"version":3,"sources":["store/actions/editor.js","constants.js","components/NavBar.js","components/LeftPanel.js","components/RightPanel.js","components/shapes/Rectangle.js","components/shapes/Circle.js","components/shapes/Line.js","components/shapes/Arrow.js","components/shapes/Polygon.js","components/shapes/Star.js","components/shapes/Image.js","components/shapes/Text.js","components/shapes/Ring.js","components/shapes/Arc.js","components/EditorArea.js","App.js","reportWebVitals.js","store/reducers/index.js","store/reducers/editor.js","index.js"],"names":["SET_SELECTED_SHAPE_ID","UPDATE_SELECTED_SHAPE_ID","UPDATE_SHAPE","ADD_SHAPE","DELETE_SHAPE","SET_OPERATION","SET_EDITOR_SCALE","PUT_TO_TOP","PUT_TO_BOTTOM","SET_LAYERS","SHAPES","SHAPES_CONFIG","CIRCLE","x","y","width","height","fill","display","rotation","scaleX","scaleY","radius","RECTANGLE","cornerRadius","LINE","stroke","strokeWidth","points","ARROW","POLYGON","sides","STAR","numPoints","innerRadius","outerRadius","IMAGE","TEXT","text","fontFamily","fontSize","padding","lineHeight","textDecoration","align","verticalAlign","RING","ARC","angle","DEVICES","PHONES","displayName","TABLETS","DESKTOPS","WATCHES","PAPERS","SOCIALS","NavBar","props","inputFileRef","React","createRef","Navbar","expand","bg","variant","fixed","Brand","href","Nav","NavDropdown","title","id","map","phone","index","Item","onClick","addDeviceBackground","tablet","desktop","watch","paper","social","Link","setOperation","this","selectedOperation","Provider","value","color","current","click","unsetOperation","ref","style","type","event","target","onChange","imageSrc","URL","createObjectURL","files","addShape","src","Component","connect","state","editor","dispatch","shape","options","editorActionTypes","val","config","canBeTransformed","setEditorScale","LeftPanel","className","Badge","pill","ListGroup","layers","selectedId","setSelectedShape","putToTop","putToBottom","updateShape","deleteShape","shapeId","newAttrs","RightPanel","handleChange","key","property","layer","handleChangeComplete","hex","handleChangeCompleteStar","Form","InputGroup","Prepend","Text","FormControl","aria-label","defaultValue","e","ariaLabel","parseFloat","onChangeComplete","hasOwnProperty","split","num","col","Rectangle","shapeProps","isSelected","onSelect","toggleHover","shapeRef","useRef","trRef","useEffect","nodes","getLayer","batchDraw","useState","shadowBlur","setShadowBlur","Fragment","onTap","draggable","onDblClick","onMouseEnter","onMouseOut","shadowColor","onDragEnd","onTransformStart","onTransformEnd","node","Math","max","boundBoxFunc","oldBox","newBox","RCircle","RLine","isDrawing","RArrow","RPolygon","RStar","RImage","image","setImage","imageObj","window","Image","addEventListener","RText","RRing","RArc","EditorArea","handleMouseDown","setState","stageRef","position","pos","getStage","getPointerPosition","addLine","setTimeout","handleMouseMove","length","lastLine","newPoints","toggleExportModal","showExpModal","previewImage","getPreviewImage","handleExport","uri","name","link","document","createElement","download","body","appendChild","removeChild","downloadURI","getDimension","layerRef","getChildren","MIN","MAX","minx","miny","maxx","maxy","simpleMinx","simpleMiny","i","dimensionData","getClientRect","nodeX","nodeY","min","toDataURL","pixelRatio","quality","stageHeight","stageWidth","scaleBy","layerId","parseInt","checked","setLayers","Modal","dialogClassName","show","onHide","Header","closeButton","Title","Body","Row","Button","Col","md","Check","label","handleCheckboxChange","overflow","backgroundColor","textAlign","alt","size","float","zIndex","right","top","evt","stopPropagation","stageScale","onMouseDown","onMouseMove","onMouseUp","filter","scale","App","Container","sm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","actionTypes","clone","splice","stateClone","layersClone","selectedLayer","push","layersCln","selectedLyr","unshift","store","createStore","reducer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3db0baee.chunk.js","sourcesContent":["export const SET_SELECTED_SHAPE_ID = \"SET_SELECTED_SHAPE_ID\";\nexport const UPDATE_SELECTED_SHAPE_ID = \"UPDATE_SELECTED_SHAPE_ID\";\nexport const UPDATE_SHAPE = \"UPDATE_SHAPE\";\nexport const ADD_SHAPE = \"ADD_SHAPE\";\nexport const DELETE_SHAPE = \"DELETE_SHAPE\";\nexport const DISABLE_HOVER = \"DISABLE_HOVER\";\nexport const SET_OPERATION = \"SET_OPERATION\";\nexport const SET_EDITOR_SCALE = \"SET_EDITOR_SCALE\";\nexport const PUT_TO_TOP = \"PUT_TO_TOP\";\nexport const PUT_TO_BOTTOM = \"PUT_TO_BOTTOM\";\nexport const SET_LAYERS = \"SET_LAYERS\";\n","export const SHAPES = {\n  CIRCLE: \"CIRCLE\",\n  RECTANGLE: \"RECTANGLE\",\n  LINE: \"LINE\",\n  ARROW: \"ARROW\",\n  POLYGON: \"POLYGON\",\n  STAR: \"STAR\",\n  IMAGE: \"IMAGE\",\n  TEXT: \"TEXT\",\n  RING: \"RING\",\n  ARC: \"ARC\",\n  PENCIL: \"PENCIL\",\n};\n\nexport const SHAPES_CONFIG = {\n  CIRCLE: {\n    x: 80,\n    y: 150,\n    width: 100,\n    height: 100,\n    fill: \"#000000\",\n    display: true,\n    rotation: 0,\n    scaleX: 1,\n    scaleY: 1,\n    radius: 60,\n  },\n  RECTANGLE: {\n    x: 50,\n    y: 100,\n    width: 100,\n    height: 100,\n    fill: \"#000000\",\n    display: true,\n    cornerRadius: [0, 0, 0, 0],\n    rotation: 0,\n    scaleX: 1,\n    scaleY: 1,\n  },\n  LINE: {\n    stroke: \"#000000\",\n    strokeWidth: 5,\n    points: [0, 100, 100, 0],\n    display: true,\n    scaleX: 1,\n    scaleY: 1,\n    rotation: 0,\n  },\n  ARROW: {\n    x: 50,\n    stroke: \"#000000\",\n    strokeWidth: 5,\n    y: 100,\n    points: [0, 100, 100, 0],\n    display: true,\n    rotation: 0,\n    scaleX: 1,\n    scaleY: 1,\n  },\n  POLYGON: {\n    x: 100,\n    stroke: \"#000000\",\n    strokeWidth: 5,\n    y: 200,\n    sides: 3,\n    radius: 70,\n    display: true,\n    rotation: 0,\n    scaleX: 1,\n    scaleY: 1,\n    width: 150,\n    height: 150,\n  },\n  STAR: {\n    x: 100,\n    y: 150,\n    numPoints: 5,\n    innerRadius: 40,\n    outerRadius: 70,\n    fill: \"#000000\",\n    stroke: \"black\",\n    strokeWidth: 4,\n    display: true,\n    rotation: 0,\n    scaleX: 1,\n    scaleY: 1,\n    width: 150,\n    height: 150,\n  },\n  IMAGE: {\n    display: true,\n    rotation: 0,\n    scaleX: 1,\n    scaleY: 1,\n  },\n  TEXT: {\n    display: true,\n    text: \"Text\",\n    fontFamily: \"Times New Roman\",\n    fontSize: 24,\n    x: 100,\n    y: 100,\n    rotation: 0,\n    scaleX: 1,\n    scaleY: 1,\n    padding: 10,\n    lineHeight: 2,\n    textDecoration: \"none\",\n    align: \"center\",\n    verticalAlign: \"center\",\n    width: 200,\n    height: 100,\n  },\n  RING: {\n    x: 80,\n    y: 150,\n    innerRadius: 15,\n    outerRadius: 20,\n    width: 100,\n    height: 100,\n    fill: \"#000000\",\n    display: true,\n    rotation: 0,\n    scaleX: 1,\n    scaleY: 1,\n  },\n  ARC: {\n    x: 80,\n    y: 150,\n    angle: 79,\n    innerRadius: 15,\n    outerRadius: 20,\n    width: 100,\n    height: 100,\n    fill: \"#000000\",\n    display: true,\n    rotation: 0,\n    scaleX: 1,\n    scaleY: 1,\n  },\n};\n\nexport const DEVICES = {\n  PHONES: [\n    {\n      displayName: \"iPhone 11 Pro Max\",\n      width: 414,\n      height: 896,\n    },\n    {\n      displayName: \"iPhone 11 Pro / X\",\n      width: 375,\n      height: 812,\n    },\n    {\n      displayName: \"iPhone 8 Plus / X\",\n      width: 414,\n      height: 736,\n    },\n    {\n      displayName: \"iPhone 8\",\n      width: 375,\n      height: 667,\n    },\n    {\n      displayName: \"iPhone SE\",\n      width: 320,\n      height: 568,\n    },\n    {\n      displayName: \"Google Pixel 2\",\n      width: 411,\n      height: 731,\n    },\n    {\n      displayName: \"Google Pixel 2 XL\",\n      width: 411,\n      height: 823,\n    },\n    {\n      displayName: \"Andriod\",\n      width: 360,\n      height: 640,\n    },\n  ],\n  TABLETS: [\n    {\n      displayName: \"iPad Mini\",\n      width: 768,\n      height: 1024,\n    },\n    {\n      displayName: \"iPad Pro 11\",\n      width: 834,\n      height: 1194,\n    },\n    {\n      displayName: \"iPad Pro 12.9\",\n      width: 1024,\n      height: 1366,\n    },\n    {\n      displayName: \"Surface Pro 3\",\n      width: 1440,\n      height: 990,\n    },\n    {\n      displayName: \"Surface Pro 4\",\n      width: 1368,\n      height: 912,\n    },\n  ],\n  DESKTOPS: [\n    {\n      displayName: \"Desktop\",\n      width: 1440,\n      height: 1024,\n    },\n    {\n      displayName: \"MacBook\",\n      width: 1152,\n      height: 700,\n    },\n    {\n      displayName: \"MacBook Pro\",\n      width: 1440,\n      height: 900,\n    },\n    {\n      displayName: \"Surface Book\",\n      width: 1500,\n      height: 1000,\n    },\n    {\n      displayName: \"iMac\",\n      width: 1280,\n      height: 720,\n    },\n  ],\n  WATCHES: [\n    {\n      displayName: \"Apple Watch 44mm\",\n      width: 184,\n      height: 224,\n    },\n    {\n      displayName: \"Apple Watch 42mm\",\n      width: 156,\n      height: 195,\n    },\n    {\n      displayName: \"Apple Watch 40mm\",\n      width: 162,\n      height: 197,\n    },\n    {\n      displayName: \"Apple Watch 38mm\",\n      width: 136,\n      height: 170,\n    },\n  ],\n  PAPERS: [\n    {\n      displayName: \"A4\",\n      width: 595,\n      height: 842,\n    },\n    {\n      displayName: \"A5\",\n      width: 420,\n      height: 595,\n    },\n    {\n      displayName: \"A6\",\n      width: 297,\n      height: 420,\n    },\n    {\n      displayName: \"Letter\",\n      width: 612,\n      height: 792,\n    },\n    {\n      displayName: \"Tabloid\",\n      width: 792,\n      height: 1224,\n    },\n  ],\n  SOCIALS: [\n    {\n      displayName: \"Twitter Post\",\n      width: 1012,\n      height: 506,\n    },\n    {\n      displayName: \"Twitter Header\",\n      width: 1500,\n      height: 500,\n    },\n    {\n      displayName: \"Facebook Post\",\n      width: 1200,\n      height: 630,\n    },\n    {\n      displayName: \"Facebook Cover\",\n      width: 820,\n      height: 312,\n    },\n    {\n      displayName: \"Instagram Post\",\n      width: 1080,\n      height: 1080,\n    },\n    {\n      displayName: \"Instagram Story\",\n      width: 1080,\n      height: 1920,\n    },\n    {\n      displayName: \"Dribble Shot\",\n      width: 400,\n      height: 300,\n    },\n    {\n      displayName: \"Dribble Shot HD\",\n      width: 800,\n      height: 600,\n    },\n    {\n      displayName: \"LinkedIn Cover\",\n      width: 1584,\n      height: 396,\n    },\n  ],\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../css/navbar.scss\";\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport * as editorActionTypes from \"../store/actions/editor\";\nimport {\n  AiOutlineMinus,\n  AiOutlineStar,\n  BiCircle,\n  BiImage,\n  BiRectangle,\n  BsArrowUpRight,\n  BsTriangle,\n  CgShapeHalfCircle,\n  FaLifeRing,\n  FaPenFancy,\n  MdTextFields,\n} from \"react-icons/all\";\nimport { IconContext } from \"react-icons\";\nimport { DEVICES, SHAPES } from \"../constants\";\n\nclass NavBar extends Component {\n  constructor(props) {\n    super(props);\n    this.inputFileRef = React.createRef();\n  }\n\n  render() {\n    return (\n      <Navbar expand=\"md\" bg=\"dark\" variant=\"dark\" fixed=\"top\">\n        <Navbar.Brand href=\"https://www.thedesignwine.com\">\n          The Rigel\n        </Navbar.Brand>\n        <Nav>\n          <NavDropdown title=\"Phones\" id=\"collasible-nav-dropdown\">\n            {DEVICES.PHONES.map((phone, index) => {\n              return (\n                <NavDropdown.Item\n                  key={index}\n                  onClick={() => {\n                    this.props.addDeviceBackground(phone);\n                  }}\n                >\n                  {phone.displayName}\n                </NavDropdown.Item>\n              );\n            })}\n          </NavDropdown>\n          <NavDropdown title=\"Tablets\" id=\"collasible-nav-dropdown\">\n            {DEVICES.TABLETS.map((tablet, index) => {\n              return (\n                <NavDropdown.Item\n                  key={index}\n                  onClick={() => {\n                    this.props.addDeviceBackground(tablet);\n                  }}\n                >\n                  {tablet.displayName}\n                </NavDropdown.Item>\n              );\n            })}\n          </NavDropdown>\n          <NavDropdown title=\"Desktop\" id=\"collasible-nav-dropdown\">\n            {DEVICES.DESKTOPS.map((desktop, index) => {\n              return (\n                <NavDropdown.Item\n                  key={index}\n                  onClick={() => {\n                    this.props.addDeviceBackground(desktop);\n                  }}\n                >\n                  {desktop.displayName}\n                </NavDropdown.Item>\n              );\n            })}\n          </NavDropdown>\n          <NavDropdown title=\"Watches\" id=\"collasible-nav-dropdown\">\n            {DEVICES.WATCHES.map((watch, index) => {\n              return (\n                <NavDropdown.Item\n                  key={index}\n                  onClick={() => {\n                    this.props.addDeviceBackground(watch);\n                  }}\n                >\n                  {watch.displayName}\n                </NavDropdown.Item>\n              );\n            })}\n          </NavDropdown>\n          <NavDropdown title=\"Papers\" id=\"collasible-nav-dropdown\">\n            {DEVICES.PAPERS.map((paper, index) => {\n              return (\n                <NavDropdown.Item\n                  key={index}\n                  onClick={() => {\n                    this.props.addDeviceBackground(paper);\n                  }}\n                >\n                  {paper.displayName}\n                </NavDropdown.Item>\n              );\n            })}\n          </NavDropdown>\n          <NavDropdown title=\"Social Media\" id=\"collasible-nav-dropdown\">\n            {DEVICES.SOCIALS.map((social, index) => {\n              return (\n                <NavDropdown.Item\n                  key={index}\n                  onClick={() => {\n                    this.props.addDeviceBackground(social);\n                  }}\n                >\n                  {social.displayName}\n                </NavDropdown.Item>\n              );\n            })}\n          </NavDropdown>\n        </Nav>\n        <Nav>\n          <Nav.Link onClick={() => this.props.setOperation(SHAPES.CIRCLE)}>\n            {this.props.selectedOperation === SHAPES.CIRCLE ? (\n              <IconContext.Provider value={{ color: \"#0b8793\" }}>\n                <div>\n                  <BiCircle />\n                </div>\n              </IconContext.Provider>\n            ) : (\n              <BiCircle />\n            )}\n          </Nav.Link>\n          <Nav.Link onClick={() => this.props.setOperation(SHAPES.LINE)}>\n            {this.props.selectedOperation === SHAPES.LINE ? (\n              <IconContext.Provider value={{ color: \"#0b8793\" }}>\n                <div>\n                  <AiOutlineMinus />\n                </div>\n              </IconContext.Provider>\n            ) : (\n              <AiOutlineMinus />\n            )}\n          </Nav.Link>\n          <Nav.Link onClick={() => this.props.setOperation(SHAPES.RECTANGLE)}>\n            {this.props.selectedOperation === SHAPES.RECTANGLE ? (\n              <IconContext.Provider value={{ color: \"#0b8793\" }}>\n                <div>\n                  <BiRectangle />\n                </div>\n              </IconContext.Provider>\n            ) : (\n              <BiRectangle />\n            )}\n          </Nav.Link>\n          <Nav.Link onClick={() => this.props.setOperation(SHAPES.ARROW)}>\n            {this.props.selectedOperation === SHAPES.ARROW ? (\n              <IconContext.Provider value={{ color: \"#0b8793\" }}>\n                <div>\n                  <BsArrowUpRight />\n                </div>\n              </IconContext.Provider>\n            ) : (\n              <BsArrowUpRight />\n            )}\n          </Nav.Link>\n          <Nav.Link onClick={() => this.props.setOperation(SHAPES.POLYGON)}>\n            {this.props.selectedOperation === SHAPES.POLYGON ? (\n              <IconContext.Provider value={{ color: \"#0b8793\" }}>\n                <div>\n                  <BsTriangle />\n                </div>\n              </IconContext.Provider>\n            ) : (\n              <BsTriangle />\n            )}\n          </Nav.Link>\n          <Nav.Link onClick={() => this.props.setOperation(SHAPES.STAR)}>\n            {this.props.selectedOperation === SHAPES.STAR ? (\n              <IconContext.Provider value={{ color: \"#0b8793\" }}>\n                <div>\n                  <AiOutlineStar />\n                </div>\n              </IconContext.Provider>\n            ) : (\n              <AiOutlineStar />\n            )}\n          </Nav.Link>\n          <Nav.Link onClick={() => this.inputFileRef.current.click()}>\n            <BiImage />\n          </Nav.Link>\n          <Nav.Link onClick={() => this.props.setOperation(SHAPES.RING)}>\n            {this.props.selectedOperation === SHAPES.RING ? (\n              <IconContext.Provider value={{ color: \"#0b8793\" }}>\n                <div>\n                  <FaLifeRing />\n                </div>\n              </IconContext.Provider>\n            ) : (\n              <FaLifeRing />\n            )}\n          </Nav.Link>\n          <Nav.Link onClick={() => this.props.setOperation(SHAPES.ARC)}>\n            {this.props.selectedOperation === SHAPES.ARC ? (\n              <IconContext.Provider value={{ color: \"#0b8793\" }}>\n                <div>\n                  <CgShapeHalfCircle />\n                </div>\n              </IconContext.Provider>\n            ) : (\n              <CgShapeHalfCircle />\n            )}\n          </Nav.Link>\n          <Nav.Link>\n            {this.props.selectedOperation === SHAPES.PENCIL ? (\n              <IconContext.Provider value={{ color: \"#0b8793\" }}>\n                <div>\n                  <FaPenFancy onClick={() => this.props.unsetOperation()} />\n                </div>\n              </IconContext.Provider>\n            ) : (\n              <FaPenFancy\n                onClick={() => this.props.setOperation(SHAPES.PENCIL)}\n              />\n            )}\n          </Nav.Link>\n          <Nav.Link onClick={() => this.props.setOperation(SHAPES.TEXT)}>\n            <MdTextFields />\n          </Nav.Link>\n        </Nav>\n        <input\n          ref={this.inputFileRef}\n          style={{ display: \"none\" }}\n          id=\"fileItem\"\n          type=\"file\"\n          onClick={(event) => (event.target.value = null)}\n          onChange={(event) => {\n            let imageSrc = URL.createObjectURL(event.target.files[0]);\n            this.props.addShape(SHAPES.IMAGE, { src: imageSrc });\n          }}\n        />\n      </Navbar>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedOperation: state.editor.selectedOperation,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addShape: (shape, options = {}) => {\n      dispatch({\n        type: editorActionTypes.ADD_SHAPE,\n        shape: shape,\n        options: options,\n      });\n      dispatch({ type: editorActionTypes.UPDATE_SELECTED_SHAPE_ID });\n    },\n    setOperation: (val) => {\n      dispatch({\n        type: editorActionTypes.SET_OPERATION,\n        val: val,\n      });\n    },\n    unsetOperation: () => {\n      dispatch({\n        type: editorActionTypes.SET_OPERATION,\n        val: null,\n      });\n    },\n    addDeviceBackground: (config) => {\n      dispatch({\n        type: editorActionTypes.ADD_SHAPE,\n        shape: SHAPES.RECTANGLE,\n        config: { ...config, fill: \"white\", canBeTransformed: false },\n      });\n    },\n    setEditorScale: (val) => {\n      dispatch({\n        type: editorActionTypes.SET_EDITOR_SCALE,\n        val: val,\n      });\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../css/leftpanel.scss\";\nimport * as editorActionTypes from \"../store/actions/editor\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Badge from \"react-bootstrap/Badge\";\nimport {\n  AiOutlineEye,\n  AiOutlineEyeInvisible,\n  AiOutlineToTop,\n  AiOutlineVerticalAlignBottom,\n  RiDeleteBin6Line,\n} from \"react-icons/all\";\n\nclass LeftPanel extends Component {\n  render() {\n    return (\n      <div className=\"LeftPanel\">\n        <Badge pill variant=\"info\">\n          Layers\n        </Badge>\n        <ListGroup variant=\"flush\">\n          {this.props.layers.map((shape) => {\n            return (\n              <ListGroup.Item\n                key={shape.id}\n                variant={shape.id === this.props.selectedId ? \"dark\" : \"\"}\n                onClick={() => this.props.setSelectedShape(shape.id)}\n              >\n                <div className=\"LayerInfo\">\n                  <span>{shape.displayName || shape.type}</span>\n                  <div className=\"LayerActions\">\n                    <span>\n                      <AiOutlineVerticalAlignBottom\n                        onClick={() => this.props.putToTop(shape.id)}\n                      />\n                    </span>\n                    <span>\n                      <AiOutlineToTop\n                        onClick={() => this.props.putToBottom(shape.id)}\n                      />\n                    </span>\n                    <span>\n                      {shape.display && (\n                        <AiOutlineEyeInvisible\n                          onClick={() =>\n                            this.props.updateShape(shape.id, {\n                              ...shape,\n                              display: false,\n                            })\n                          }\n                        />\n                      )}\n                      {!shape.display && (\n                        <AiOutlineEye\n                          onClick={() =>\n                            this.props.updateShape(shape.id, {\n                              ...shape,\n                              display: true,\n                            })\n                          }\n                        />\n                      )}\n                    </span>\n                    <span>\n                      <RiDeleteBin6Line\n                        onClick={() => this.props.deleteShape(shape.id)}\n                      />\n                    </span>\n                  </div>\n                </div>\n              </ListGroup.Item>\n            );\n          })}\n        </ListGroup>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    layers: state.editor.layers || [],\n    selectedId: state.editor.selectedId,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSelectedShape: (shapeId) => {\n      dispatch({\n        type: editorActionTypes.SET_SELECTED_SHAPE_ID,\n        shapeId: -1,\n      });\n      dispatch({\n        type: editorActionTypes.SET_SELECTED_SHAPE_ID,\n        shapeId: shapeId,\n      });\n    },\n    deleteShape: (shapeId) =>\n      dispatch({\n        type: editorActionTypes.DELETE_SHAPE,\n        shapeId: shapeId,\n      }),\n    updateShape: (shapeId, newAttrs) =>\n      dispatch({\n        type: editorActionTypes.UPDATE_SHAPE,\n        shapeId: shapeId,\n        newAttrs: newAttrs,\n      }),\n    putToTop: (shapeId) => {\n      dispatch({\n        type: editorActionTypes.PUT_TO_TOP,\n        shapeId: shapeId,\n      });\n    },\n    putToBottom: (shapeId) => {\n      dispatch({\n        type: editorActionTypes.PUT_TO_BOTTOM,\n        shapeId: shapeId,\n      });\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftPanel);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../css/rightpanel.scss\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { Form, FormControl, InputGroup } from \"react-bootstrap\";\nimport { SHAPES } from \"../constants\";\nimport * as editorActionTypes from \"../store/actions/editor\";\nimport { SketchPicker } from \"react-color\";\n\nclass RightPanel extends Component {\n  handleChange = (key, value) => {\n    let property = key;\n    let newAttrs = { ...this.props.layer };\n    newAttrs[property] = value;\n    this.props.updateShape(this.props.selectedId, newAttrs);\n  };\n\n  handleChangeComplete = (color) => {\n    let newAttrs = { ...this.props.layer };\n    if (\n      newAttrs.type === SHAPES.LINE ||\n      newAttrs.type === SHAPES.ARROW ||\n      newAttrs.type === SHAPES.POLYGON\n    ) {\n      newAttrs[\"stroke\"] = color.hex;\n    } else {\n      newAttrs[\"fill\"] = color.hex;\n    }\n    this.props.updateShape(this.props.selectedId, newAttrs);\n  };\n\n  handleChangeCompleteStar = (color, property) => {\n    let newAttrs = { ...this.props.layer };\n    newAttrs[property] = color.hex;\n    this.props.updateShape(this.props.selectedId, newAttrs);\n  };\n\n  render() {\n    return (\n      <div className=\"RightPanel\">\n        <Badge pill variant=\"info\">\n          Design\n        </Badge>\n        {this.props.layer ? (\n          <div>\n            {this.props.layer.type === SHAPES.CIRCLE && (\n              <Form>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"x\"\n                      defaultValue={this.props.layer.x}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"y\">Y</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"y\"\n                      defaultValue={this.props.layer.y}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Single\">\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"radius\">Radius</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"radius\"\n                      defaultValue={this.props.layer.radius}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <SketchPicker\n                  color={this.props.layer.fill}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </Form>\n            )}\n            {this.props.layer.type === SHAPES.RECTANGLE &&\n              !this.props.layer.hasOwnProperty(\"displayName\") && (\n                <Form>\n                  <div className=\"Tuple\">\n                    <InputGroup className=\"First\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"x\">X</InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        aria-label=\"x\"\n                        defaultValue={this.props.layer.x}\n                        onChange={(e) => {\n                          if (e.target.value)\n                            this.handleChange(\n                              e.target.ariaLabel,\n                              parseFloat(e.target.value)\n                            );\n                        }}\n                      />\n                    </InputGroup>\n                    <InputGroup className=\"Second\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"y\">Y</InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        aria-label=\"y\"\n                        defaultValue={this.props.layer.y}\n                        onChange={(e) => {\n                          if (e.target.value)\n                            this.handleChange(\n                              e.target.ariaLabel,\n                              parseFloat(e.target.value)\n                            );\n                        }}\n                      />\n                    </InputGroup>\n                  </div>\n                  <div className=\"Tuple\">\n                    <InputGroup className=\"First\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"width\">Width</InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        aria-label=\"width\"\n                        defaultValue={this.props.layer.width}\n                        onChange={(e) => {\n                          if (e.target.value)\n                            this.handleChange(\n                              e.target.ariaLabel,\n                              parseFloat(e.target.value)\n                            );\n                        }}\n                      />\n                    </InputGroup>\n                    <InputGroup className=\"Second\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"height\">Height</InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        aria-label=\"height\"\n                        defaultValue={this.props.layer.height}\n                        onChange={(e) => {\n                          if (e.target.value)\n                            this.handleChange(\n                              e.target.ariaLabel,\n                              parseFloat(e.target.value)\n                            );\n                        }}\n                      />\n                    </InputGroup>\n                  </div>\n                  <div className=\"Single\">\n                    <InputGroup>\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"cornerRadius\">\n                          Corner Radius\n                        </InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        aria-label=\"cornerRadius\"\n                        defaultValue={this.props.layer.cornerRadius}\n                        onChange={(e) => {\n                          let value = e.target.value\n                            .split(\",\")\n                            .map((num) => parseFloat(num));\n                          if (e.target.value)\n                            this.handleChange(e.target.ariaLabel, value);\n                        }}\n                      />\n                    </InputGroup>\n                  </div>\n                  <SketchPicker\n                    color={this.props.layer.fill}\n                    onChangeComplete={this.handleChangeComplete}\n                  />\n                </Form>\n              )}\n            {this.props.layer.type === SHAPES.LINE && (\n              <Form>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"x\"\n                      defaultValue={this.props.layer.x}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"y\">Y</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"y\"\n                      defaultValue={this.props.layer.y}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Single\">\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"strokeWidth\">\n                        Stroke Width\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"strokeWidth\"\n                      defaultValue={this.props.layer.strokeWidth}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <SketchPicker\n                  color={this.props.layer.fill}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </Form>\n            )}\n            {this.props.layer.type === SHAPES.ARROW && (\n              <Form>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"x\"\n                      defaultValue={this.props.layer.x}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"y\">Y</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"y\"\n                      defaultValue={this.props.layer.y}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Single\">\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"strokeWidth\">\n                        Stroke Width\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"strokeWidth\"\n                      defaultValue={this.props.layer.strokeWidth}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <SketchPicker\n                  color={this.props.layer.fill}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </Form>\n            )}\n            {this.props.layer.type === SHAPES.POLYGON && (\n              <Form>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"x\"\n                      defaultValue={this.props.layer.x}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"y\">Y</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"y\"\n                      defaultValue={this.props.layer.y}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"width\">Width</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"width\"\n                      defaultValue={this.props.layer.width}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"height\">Height</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"height\"\n                      defaultValue={this.props.layer.height}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"strokeWidth\">\n                        Stroke Width\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"strokeWidth\"\n                      defaultValue={this.props.layer.strokeWidth}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"sides\">Sides</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"sides\"\n                      defaultValue={this.props.layer.sides}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <SketchPicker\n                  color={this.props.layer.fill}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </Form>\n            )}\n            {this.props.layer.type === SHAPES.STAR && (\n              <Form>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"width\">Width</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"width\"\n                      defaultValue={this.props.layer.width}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"height\">Height</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"height\"\n                      defaultValue={this.props.layer.height}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"x\"\n                      defaultValue={this.props.layer.x}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"y\">Y</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"y\"\n                      defaultValue={this.props.layer.y}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"strokeWidth\">\n                        Stroke Width\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"strokeWidth\"\n                      defaultValue={this.props.layer.strokeWidth}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"numPoints\">\n                        Num Points\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"numPoints\"\n                      defaultValue={this.props.layer.numPoints}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"innerRadius\">\n                        Inner Radius\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"innerRadius\"\n                      defaultValue={this.props.layer.innerRadius}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"outerRadius\">\n                        Outer Radius\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"outerRadius\"\n                      defaultValue={this.props.layer.outerRadius}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <SketchPicker\n                  color={this.props.layer.fill}\n                  onChangeComplete={(col) =>\n                    this.handleChangeCompleteStar(col, \"fill\")\n                  }\n                />\n                <SketchPicker\n                  color={this.props.layer.stroke}\n                  onChangeComplete={(col) =>\n                    this.handleChangeCompleteStar(col, \"stroke\")\n                  }\n                />\n              </Form>\n            )}\n            {this.props.layer.type === SHAPES.TEXT && (\n              <Form>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"width\">Width</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"width\"\n                      defaultValue={this.props.layer.width}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"height\">Height</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"height\"\n                      defaultValue={this.props.layer.height}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"x\"\n                      defaultValue={this.props.layer.x}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"y\">Y</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"y\"\n                      defaultValue={this.props.layer.y}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"padding\">Padding</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"padding\"\n                      defaultValue={this.props.layer.padding}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(e.target.ariaLabel, e.target.value);\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"fontSize\">Font Size</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"fontSize\"\n                      defaultValue={this.props.layer.fontSize}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Single\">\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"fontFamily\">\n                        Font Family\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"fontFamily\"\n                      defaultValue={this.props.layer.fontFamily}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(e.target.ariaLabel, e.target.value);\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Single\">\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"textDecoration\">\n                        Text Decoration\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"textDecoration\"\n                      defaultValue={this.props.layer.textDecoration}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(e.target.ariaLabel, e.target.value);\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Single\">\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"lineHeight\">\n                        LineHeight\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"lineHeight\"\n                      defaultValue={this.props.layer.lineHeight}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(e.target.ariaLabel, e.target.value);\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Single\">\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"text\">Text</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"text\"\n                      defaultValue={this.props.layer.text}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(e.target.ariaLabel, e.target.value);\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <SketchPicker\n                  color={this.props.layer.fill}\n                  onChangeComplete={(col) => this.handleChangeComplete(col)}\n                />\n              </Form>\n            )}\n            {this.props.layer.type === SHAPES.ARC && (\n              <Form>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"x\"\n                      defaultValue={this.props.layer.x}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"y\">Y</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"y\"\n                      defaultValue={this.props.layer.y}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"width\">Width</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"width\"\n                      defaultValue={this.props.layer.width}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"height\">Height</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"height\"\n                      defaultValue={this.props.layer.height}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"innerRadius\">\n                        Inner Radius\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"innerRadius\"\n                      defaultValue={this.props.layer.innerRadius}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"outerRadius\">\n                        Outer Radius\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"outerRadius\"\n                      defaultValue={this.props.layer.outerRadius}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Single\">\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"angle\">Angle</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"angle\"\n                      defaultValue={this.props.layer.angle}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <SketchPicker\n                  color={this.props.layer.fill}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </Form>\n            )}\n            {this.props.layer.type === SHAPES.RING && (\n              <Form>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"x\">X</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"x\"\n                      defaultValue={this.props.layer.x}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"y\">Y</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"y\"\n                      defaultValue={this.props.layer.y}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <div className=\"Tuple\">\n                  <InputGroup className=\"First\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"innerRadius\">\n                        Inner Radius\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"innerRadius\"\n                      defaultValue={this.props.layer.innerRadius}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                  <InputGroup className=\"Second\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"outerRadius\">\n                        Outer Radius\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"outerRadius\"\n                      defaultValue={this.props.layer.outerRadius}\n                      onChange={(e) => {\n                        if (e.target.value)\n                          this.handleChange(\n                            e.target.ariaLabel,\n                            parseFloat(e.target.value)\n                          );\n                      }}\n                    />\n                  </InputGroup>\n                </div>\n                <SketchPicker\n                  color={this.props.layer.fill}\n                  onChangeComplete={this.handleChangeComplete}\n                />\n              </Form>\n            )}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedId: state.editor.selectedId,\n    layers: state.editor.layers,\n    layer: state.editor.layers\n      ? state.editor.layers[state.editor.selectedId]\n      : null,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateShape: (shapeId, newAttrs) =>\n      dispatch({\n        type: editorActionTypes.UPDATE_SHAPE,\n        shapeId: shapeId,\n        newAttrs: newAttrs,\n      }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RightPanel);\n","import React, { useState } from \"react\";\nimport { Rect, Transformer } from \"react-konva\";\n\nlet Rectangle = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  toggleHover,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (\n      !(shapeProps.hasOwnProperty(\"canBeTransformed\")\n        ? shapeProps.canBeTransformed\n        : true)\n    ) {\n      return;\n    }\n    shapeRef.current.rotation(shapeProps.rotation);\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [\n    isSelected,\n    shapeProps,\n    shapeProps.scaleX,\n    shapeProps.scaleY,\n    shapeProps.rotation,\n    shapeProps.canBeTransformed,\n  ]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Rect\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDblClick={() => {\n          setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => {\n          if (\n            !(shapeProps.hasOwnProperty(\"canBeTransformed\")\n              ? shapeProps.canBeTransformed\n              : true)\n          ) {\n            return;\n          }\n          toggleHover(false);\n        }}\n        onTransformEnd={(e) => {\n          if (\n            !(shapeProps.hasOwnProperty(\"canBeTransformed\")\n              ? shapeProps.canBeTransformed\n              : true)\n          ) {\n            return;\n          }\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const width = node.width();\n          const height = node.height();\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, width * scaleX),\n            height: Math.max(5, height * scaleY),\n            rotation: node.rotation(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected &&\n        (shapeProps.hasOwnProperty(\"canBeTransformed\")\n          ? shapeProps.canBeTransformed\n          : true) && (\n          <Transformer\n            ref={trRef}\n            boundBoxFunc={(oldBox, newBox) => {\n              // limit resize\n              if (newBox.width < 5 || newBox.height < 5) {\n                return oldBox;\n              }\n              return newBox;\n            }}\n          />\n        )}\n    </React.Fragment>\n  );\n};\n\nexport default Rectangle;\n","import React, { useState } from \"react\";\nimport { Circle, Transformer } from \"react-konva\";\n\nlet RCircle = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  toggleHover,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected, shapeProps.scaleX, shapeProps.scaleY, shapeProps.rotation]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Circle\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        onDblClick={() => {\n          setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        draggable\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => toggleHover(false)}\n        onTransformEnd={(e) => {\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            scaleX: scaleX,\n            scaleY: scaleY,\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RCircle;\n","import React, { useState } from \"react\";\nimport { Line, Transformer } from \"react-konva\";\n\nlet RLine = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  toggleHover,\n  isDrawing,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    shapeRef.current.scaleX(shapeProps.scaleX);\n    shapeRef.current.scaleY(shapeProps.scaleY);\n    shapeRef.current.rotation(shapeProps.rotation);\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected, shapeProps.scaleX, shapeProps.scaleY, shapeProps.rotation]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Line\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDblClick={() => {\n          if (!isDrawing) setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => {\n          toggleHover(false);\n        }}\n        onTransformEnd={(e) => {\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n          const rotation = node.rotation();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            scaleX: scaleX,\n            scaleY: scaleY,\n            rotation: rotation,\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RLine;\n","import React, { useState } from \"react\";\nimport { Arrow, Transformer } from \"react-konva\";\n\nlet RArrow = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  toggleHover,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    shapeRef.current.scaleX(shapeProps.scaleX);\n    shapeRef.current.scaleY(shapeProps.scaleY);\n    shapeRef.current.rotation(shapeProps.rotation);\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected, shapeProps.scaleX, shapeProps.scaleY, shapeProps.rotation]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Arrow\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDblClick={() => {\n          setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => toggleHover(false)}\n        onTransformEnd={(e) => {\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            rotation: node.rotation(),\n            scaleX: scaleX,\n            scaleY: scaleY,\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RArrow;\n","import React, { useState } from \"react\";\nimport { RegularPolygon, Transformer } from \"react-konva\";\n\nlet RPolygon = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  toggleHover,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    shapeRef.current.rotation(shapeProps.rotation);\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected, shapeProps.scaleX, shapeProps.scaleY, shapeProps.rotation]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <RegularPolygon\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDblClick={() => {\n          setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => toggleHover(false)}\n        onTransformEnd={(e) => {\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const width = node.width();\n          const height = node.height();\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, width * scaleX),\n            height: Math.max(5, height * scaleY),\n            rotation: node.rotation(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RPolygon;\n","import React, { useState } from \"react\";\nimport { Star, Transformer } from \"react-konva\";\n\nlet RStar = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  toggleHover,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    shapeRef.current.rotation(shapeProps.rotation);\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected, shapeProps.scaleX, shapeProps.scaleY, shapeProps.rotation]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Star\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDblClick={() => {\n          setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => toggleHover(false)}\n        onTransformEnd={(e) => {\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const width = node.width();\n          const height = node.height();\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, width * scaleX),\n            height: Math.max(5, height * scaleY),\n            rotation: node.rotation(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RStar;\n","import React, { useState } from \"react\";\nimport { Image, Transformer } from \"react-konva\";\n\nlet RImage = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  imageSrc,\n  toggleHover,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  const [image, setImage] = useState(null);\n\n  React.useEffect(() => {\n    let imageObj = new window.Image();\n    imageObj.src = imageSrc;\n    imageObj.addEventListener(\"load\", () => {\n      setImage(imageObj);\n    });\n    shapeRef.current.rotation(shapeProps.rotation);\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [\n    isSelected,\n    imageSrc,\n    shapeProps.scaleX,\n    shapeProps.scaleY,\n    shapeProps.rotation,\n  ]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Image\n        image={image}\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        onDblClick={() => {\n          setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        draggable\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => toggleHover(false)}\n        onTransformEnd={(e) => {\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const width = node.width();\n          const height = node.height();\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            rotation: node.rotation(),\n            width: Math.max(5, width * scaleX),\n            height: Math.max(5, height * scaleY),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RImage;\n","import React, { useState } from \"react\";\nimport { Text, Transformer } from \"react-konva\";\n\nlet RText = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  toggleHover,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    shapeRef.current.rotation(shapeProps.rotation);\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected, shapeProps.scaleX, shapeProps.scaleY, shapeProps.rotation]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Text\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDblClick={() => {\n          setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => toggleHover(false)}\n        onTransformEnd={(e) => {\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const width = node.width();\n          const height = node.height();\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, width * scaleX),\n            height: Math.max(5, height * scaleY),\n            rotation: node.rotation(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RText;\n","import React, { useState } from \"react\";\nimport { Ring, Transformer } from \"react-konva\";\n\nlet RRing = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  toggleHover,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    shapeRef.current.scaleX(shapeProps.scaleX);\n    shapeRef.current.scaleY(shapeProps.scaleY);\n    shapeRef.current.rotation(shapeProps.rotation);\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected, shapeProps.scaleX, shapeProps.scaleY, shapeProps.rotation]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Ring\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDblClick={() => {\n          setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => {\n          toggleHover(false);\n        }}\n        onTransformEnd={(e) => {\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n          const rotation = node.rotation();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            scaleX: scaleX,\n            scaleY: scaleY,\n            rotation: rotation,\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RRing;\n","import React, { useState } from \"react\";\nimport { Arc, Transformer } from \"react-konva\";\n\nlet RArc = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  setSelectedShape,\n  toggleHover,\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    shapeRef.current.rotation(shapeProps.rotation);\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected, shapeProps.scaleX, shapeProps.scaleY, shapeProps.rotation]);\n\n  const [shadowBlur, setShadowBlur] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Arc\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDblClick={() => {\n          setSelectedShape(shapeProps.id);\n        }}\n        onMouseEnter={() => {\n          setShadowBlur(10);\n        }}\n        onMouseOut={() => {\n          setShadowBlur(0);\n        }}\n        shadowBlur={shadowBlur}\n        shadowColor=\"#0b8793\"\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n        onTransformStart={() => toggleHover(false)}\n        onTransformEnd={(e) => {\n          toggleHover(true);\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const width = node.width();\n          const height = node.height();\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, width * scaleX),\n            height: Math.max(5, height * scaleY),\n            rotation: node.rotation(),\n          });\n          setSelectedShape(shapeProps.id);\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default RArc;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../css/editorarea.scss\";\nimport { Layer, Stage } from \"react-konva\";\nimport { SHAPES } from \"../constants\";\nimport Rectangle from \"./shapes/Rectangle\";\nimport * as editorActionTypes from \"../store/actions/editor\";\nimport RCircle from \"./shapes/Circle\";\nimport RLine from \"./shapes/Line\";\nimport RArrow from \"./shapes/Arrow\";\nimport RPolygon from \"./shapes/Polygon\";\nimport RStar from \"./shapes/Star\";\nimport RImage from \"./shapes/Image\";\nimport RText from \"./shapes/Text\";\nimport RRing from \"./shapes/Ring\";\nimport RArc from \"./shapes/Arc\";\nimport { Col, Button, Form } from \"react-bootstrap\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Row from \"react-bootstrap/Row\";\n\nclass EditorArea extends Component {\n  constructor(props) {\n    super(props);\n    this.stageRef = React.createRef();\n    this.layerRef = React.createRef();\n    this.stageHeight = 2000;\n    this.stageWidth = 2000;\n    this.scaleBy = 1.01;\n    this.state = {\n      showExpModal: false,\n      previewImage: null,\n      isDrawing: false,\n    };\n  }\n\n  handleMouseDown = (e) => {\n    if (this.props.selectedOperation === SHAPES.PENCIL) {\n      this.setState({ isDrawing: true });\n      this.stageRef.current.position({\n        x: this.stageRef.current.x(),\n        y: this.stageRef.current.y(),\n      });\n      this.stageRef.current.batchDraw();\n      const pos = e.target.getStage().getPointerPosition();\n      this.props.addLine({\n        points: [\n          pos.x - this.stageRef.current.x(),\n          pos.y - this.stageRef.current.y(),\n        ],\n      });\n    } else if (this.props.selectedOperation) {\n      this.stageRef.current.position({\n        x: this.stageRef.current.x(),\n        y: this.stageRef.current.y(),\n      });\n      let pos = this.stageRef.current.getPointerPosition();\n      this.props.addShape(this.props.selectedOperation, {\n        x: pos.x - this.stageRef.current.x(),\n        y: pos.y - this.stageRef.current.y(),\n      });\n      setTimeout(() => {\n        this.props.setOperation(null);\n      }, 500);\n    }\n  };\n\n  handleMouseMove = (e) => {\n    if (this.props.selectedOperation === SHAPES.PENCIL) {\n      if (!this.state.isDrawing) return;\n      const stage = this.stageRef.current;\n      const pos = stage.getPointerPosition();\n      if (this.props.layers.length) {\n        const lastLine = this.props.layers[this.props.layers.length - 1];\n        const newPoints = [\n          ...lastLine.points,\n          pos.x - this.stageRef.current.x(),\n          pos.y - this.stageRef.current.y(),\n        ];\n        this.props.deleteShape(this.props.layers.length - 1);\n        this.props.addLine({\n          points: newPoints,\n        });\n      } else {\n        this.props.addLine({\n          points: [\n            pos.x - this.stageRef.current.x(),\n            pos.y - this.stageRef.current.y(),\n          ],\n        });\n      }\n    }\n  };\n\n  toggleExportModal = (val) => {\n    if (val) {\n      this.props.setSelectedShape(-1);\n      this.stageRef.current.position({ x: 0, y: 0 });\n      setTimeout(() => {\n        this.setState({ showExpModal: val });\n        this.setState({ previewImage: this.getPreviewImage() });\n      }, 100);\n    } else {\n      this.setState({ showExpModal: val });\n    }\n  };\n\n  handleExport = () => {\n    setTimeout(() => {\n      let uri = this.getPreviewImage();\n      function downloadURI(uri, name) {\n        var link = document.createElement(\"a\");\n        link.download = name;\n        link.href = uri;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n      downloadURI(uri, \"design.png\");\n    }, 100);\n  };\n  //\n  // handleWheel = (e) => {\n  //   // prevent parent scrolling\n  //   e.evt.preventDefault();\n  //   let oldScale = this.stageRef.current.scaleX();\n  //\n  //   let pointer = this.stageRef.current.getPointerPosition();\n  //\n  //   var mousePointTo = {\n  //     x: (pointer.x - this.stageRef.current.x()) / oldScale,\n  //     y: (pointer.y - this.stageRef.current.y()) / oldScale,\n  //   };\n  //\n  //   var newScale =\n  //     e.evt.deltaY > 0 ? oldScale * this.scaleBy : oldScale / this.scaleBy;\n  //\n  //   this.stageRef.current.scale({ x: newScale, y: newScale });\n  //\n  //   var newPos = {\n  //     x: pointer.x - mousePointTo.x * newScale,\n  //     y: pointer.y - mousePointTo.y * newScale,\n  //   };\n  //   this.stageRef.current.position(newPos);\n  //   this.stageRef.current.batchDraw();\n  // };\n\n  getDimension = () => {\n    let nodes = this.layerRef.current.getChildren();\n    let MIN = -1e9;\n    let MAX = 1e9;\n    let minx = MAX;\n    let miny = MAX;\n    let maxx = MIN;\n    let maxy = MIN;\n    let simpleMinx = MAX;\n    let simpleMiny = MAX;\n    for (let i = 0; i < nodes.length; i++) {\n      let dimensionData = nodes[i].getClientRect();\n      let nodeX = dimensionData.x;\n      let nodeY = dimensionData.y;\n      let width = dimensionData.width;\n      let height = dimensionData.height;\n      simpleMinx = Math.min(simpleMinx, nodeX);\n      simpleMiny = Math.min(simpleMiny, nodeY);\n      minx = Math.min(minx, Math.min(nodeX + width, nodeX - width));\n      miny = Math.min(miny, Math.min(nodeY + height, nodeY - height));\n      maxx = Math.max(maxx, Math.max(nodeX - width, nodeX + width));\n      maxy = Math.max(maxy, Math.max(nodeY - height, nodeY + height));\n    }\n    return {\n      x: simpleMinx,\n      y: simpleMiny,\n      width: Math.max(minx, maxx) - simpleMinx,\n      height: Math.max(miny, maxy) - simpleMiny,\n    };\n  };\n\n  getPreviewImage = () => {\n    this.props.setSelectedShape(-1);\n    let position = this.getDimension();\n    let uri = this.stageRef.current.toDataURL({\n      pixelRatio: 1,\n      quality: 100000,\n      x: position.x,\n      y: position.y,\n      width: position.width,\n      height: position.height,\n    });\n    return uri;\n  };\n\n  handleCheckboxChange(e) {\n    this.props.setSelectedShape(-1);\n    this.stageRef.current.position({ x: 0, y: 0 });\n    let target = e.target;\n    let layerId = parseInt(target.name, 10);\n    let layers = [...this.props.layers];\n    layers.map((layer) => {\n      if (layer.id === layerId) {\n        layer.display = e.target.checked;\n      }\n      return layer;\n    });\n    this.props.setLayers(layers);\n    setTimeout(() => {\n      this.setState({ previewImage: this.getPreviewImage() });\n    }, 100);\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Modal\n          dialogClassName=\"ExportModal\"\n          show={this.state.showExpModal}\n          onHide={() => this.toggleExportModal(false)}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Select Layers to Export</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Row>\n              <Button\n                onClick={() => {\n                  this.handleExport();\n                }}\n                variant=\"success\"\n              >\n                Export Selected Layers\n              </Button>\n            </Row>\n            <Row>\n              <Col md={2}>\n                <Form>\n                  {this.props.layers.map((layer) => {\n                    return (\n                      <Form.Check\n                        key={layer.id}\n                        type=\"checkbox\"\n                        checked={layer.display}\n                        name={layer.id}\n                        label={`${layer.displayName || layer.type}`}\n                        onChange={(e) => this.handleCheckboxChange(e)}\n                      />\n                    );\n                  })}\n                </Form>\n              </Col>\n              <Col\n                md={10}\n                style={{\n                  overflow: \"scroll\",\n                  backgroundColor: \"gray\",\n                  textAlign: \"center\",\n                }}\n              >\n                <p>Preview</p>\n                <img alt=\"\" src={this.state.previewImage} />\n              </Col>\n            </Row>\n          </Modal.Body>\n        </Modal>\n        <Button\n          size=\"lg\"\n          style={{\n            float: \"right\",\n            zIndex: 10000000,\n            position: \"fixed\",\n            right: 0,\n            top: 5,\n          }}\n          variant=\"info\"\n          onClick={() => this.toggleExportModal(true)}\n        >\n          Export\n        </Button>\n        <Stage\n          width={this.stageWidth}\n          height={this.stageHeight}\n          ref={this.stageRef}\n          onClick={(e) => {\n            e.evt.stopPropagation();\n            this.props.setSelectedShape(-1);\n          }}\n          scaleX={this.props.stageScale}\n          scaleY={this.props.stageScale}\n          onMouseDown={(e) => this.handleMouseDown(e)}\n          onMouseMove={(e) => this.handleMouseMove(e)}\n          onMouseUp={(e) => this.setState({ isDrawing: false })}\n          // onWheel={this.handleWheel}\n          draggable={!this.props.selectedOperation}\n          className=\"EditorArea\"\n        >\n          <Layer ref={this.layerRef}>\n            {this.props.layers\n              .filter((shape) => shape.display)\n              .map((shape, i) => {\n                switch (shape.type) {\n                  case SHAPES.RECTANGLE:\n                    return (\n                      <Rectangle\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                      />\n                    );\n                  case SHAPES.CIRCLE:\n                    return (\n                      <RCircle\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                      />\n                    );\n                  case SHAPES.LINE:\n                    return (\n                      <RLine\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                        isDrawing={this.state.isDrawing}\n                      />\n                    );\n                  case SHAPES.ARROW:\n                    return (\n                      <RArrow\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                      />\n                    );\n                  case SHAPES.POLYGON:\n                    return (\n                      <RPolygon\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                      />\n                    );\n                  case SHAPES.STAR:\n                    return (\n                      <RStar\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                      />\n                    );\n                  case SHAPES.IMAGE:\n                    return (\n                      <RImage\n                        imageSrc={shape.options.src}\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                      />\n                    );\n                  case SHAPES.TEXT:\n                    return (\n                      <RText\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                      />\n                    );\n                  case SHAPES.RING:\n                    return (\n                      <RRing\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                      />\n                    );\n                  case SHAPES.ARC:\n                    return (\n                      <RArc\n                        key={shape.id}\n                        shapeProps={shape}\n                        isSelected={shape.id === this.props.selectedId}\n                        onSelect={() => {\n                          this.props.setSelectedShape(shape.id);\n                        }}\n                        onChange={(newAttrs) =>\n                          this.props.updateShape(shape.id, newAttrs)\n                        }\n                        setSelectedShape={this.props.setSelectedShape}\n                        toggleHover={this.props.toggleHover}\n                      />\n                    );\n                  default:\n                    return null;\n                }\n              })}\n          </Layer>\n        </Stage>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedId: state.editor.selectedId,\n    isDrawing: state.editor.isDrawing,\n    layers: state.editor.layers || [],\n    selectedOperation: state.editor.selectedOperation,\n    stageScale: state.editor.scale,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSelectedShape: (shapeId) => {\n      dispatch({\n        type: editorActionTypes.SET_SELECTED_SHAPE_ID,\n        shapeId: -1,\n      });\n      dispatch({\n        type: editorActionTypes.SET_SELECTED_SHAPE_ID,\n        shapeId: shapeId,\n      });\n    },\n    updateShape: (shapeId, newAttrs) =>\n      dispatch({\n        type: editorActionTypes.UPDATE_SHAPE,\n        shapeId: shapeId,\n        newAttrs: newAttrs,\n      }),\n    toggleHover: (val) => {\n      dispatch({\n        type: editorActionTypes.DISABLE_HOVER,\n        val: val,\n      });\n    },\n    addLine: (options) => {\n      dispatch({\n        type: editorActionTypes.ADD_SHAPE,\n        shape: SHAPES.LINE,\n        config: options,\n      });\n    },\n    deleteShape: (shapeId) =>\n      dispatch({\n        type: editorActionTypes.DELETE_SHAPE,\n        shapeId: shapeId,\n      }),\n    setEditorScale: (val) => {\n      dispatch({\n        type: editorActionTypes.SET_EDITOR_SCALE,\n        val: val,\n      });\n    },\n    setLayers: (layers) => {\n      dispatch({\n        type: editorActionTypes.SET_LAYERS,\n        val: layers,\n      });\n    },\n    setOperation: (val) => {\n      dispatch({\n        type: editorActionTypes.SET_OPERATION,\n        val: val,\n      });\n    },\n    addShape: (shape, config = {}) => {\n      dispatch({\n        type: editorActionTypes.ADD_SHAPE,\n        shape: shape,\n        config: config,\n      });\n      dispatch({ type: editorActionTypes.UPDATE_SELECTED_SHAPE_ID });\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditorArea);\n","import \"./App.scss\";\nimport NavBar from \"./components/NavBar\";\nimport LeftPanel from \"./components/LeftPanel\";\nimport RightPanel from \"./components/RightPanel\";\nimport EditorArea from \"./components/EditorArea\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Container className=\"Container\">\n        <Row>\n          <Col sm={2} className=\"panel\">\n            <LeftPanel />\n          </Col>\n          <Col sm={8} className=\"editor\">\n            <EditorArea />\n          </Col>\n          <Col sm={2} className=\"panel\">\n            <RightPanel />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\nimport editor from \"./editor\";\n\nexport default combineReducers({\n  editor: editor,\n});\n","import * as actionTypes from \"../actions/editor\";\nimport { SHAPES_CONFIG } from \"../../constants\";\nexport default function editor(state = {}, action) {\n  switch (action.type) {\n    case actionTypes.SET_SELECTED_SHAPE_ID:\n      return {\n        ...state,\n        selectedId: action.shapeId,\n      };\n    case actionTypes.UPDATE_SELECTED_SHAPE_ID:\n      return {\n        ...state,\n        selectedId: (state.layers || []).length - 1,\n      };\n    case actionTypes.ADD_SHAPE:\n      let layers = [\n        ...(state.layers || []),\n        {\n          ...SHAPES_CONFIG[action.shape],\n          id: (state.layers || []).length,\n          type: action.shape,\n          options: action.options,\n          ...action.config,\n        },\n      ];\n      return {\n        ...state,\n        layers: layers,\n      };\n    case actionTypes.DELETE_SHAPE:\n      let clone = [...state.layers];\n      clone.splice(action.shapeId, 1);\n      return {\n        ...state,\n        layers: clone.map((layer, index) => {\n          layer.id = index;\n          return layer;\n        }),\n      };\n    case actionTypes.UPDATE_SHAPE:\n      let stateClone = [...state.layers];\n      stateClone.splice(action.shapeId, 1, action.newAttrs);\n      return { ...state, layers: stateClone };\n    case actionTypes.SET_OPERATION:\n      return { ...state, selectedOperation: action.val };\n    case actionTypes.SET_EDITOR_SCALE:\n      return { ...state, scale: action.val };\n    case actionTypes.SET_LAYERS:\n      return { ...state, layers: action.val };\n    case actionTypes.PUT_TO_TOP:\n      let layersClone = [...state.layers];\n      let selectedLayer = layersClone.splice(action.shapeId, 1)[0];\n      layersClone.push(selectedLayer);\n      return {\n        ...state,\n        layers: layersClone.map((layer, index) => {\n          layer.id = index;\n          return layer;\n        }),\n      };\n    case actionTypes.PUT_TO_BOTTOM:\n      let layersCln = [...state.layers];\n      let selectedLyr = layersCln.splice(action.shapeId, 1)[0];\n      layersCln.unshift(selectedLyr);\n      return {\n        ...state,\n        layers: layersCln.map((layer, index) => {\n          layer.id = index;\n          return layer;\n        }),\n      };\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport reducer from \"./store/reducers\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}